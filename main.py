import telebot
import os
import requests
from bs4 import BeautifulSoup

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# üîó URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
URL = "https://nf.uust.ru/timetable/fulltime/files/(3)-20.10.25-25.10.25-PI.,-TMO.,-El.-ZO.html"

# üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
BELL_SCHEDULE = {
    "1": "08:00‚Äì09:35",
    "2": "09:45‚Äì11:20",
    "3": "12:00‚Äì13:35",
    "4": "13:45‚Äì15:20",
    "5": "15:40‚Äì17:15",
    "6": "17:25‚Äì19:00",
    "7": "19:10‚Äì20:45"
}


def process_location(text):
    if not text:
        return ""
    if "–≠–ò–û–°" in text:
        return "–≠–ò–û–°"
    return text.strip()


def get_schedule_for_group(target_group="–ü–ò-51–∑"):
    try:
        response = requests.get(URL, timeout=10)
        response.encoding = "windows-1251"
        response.raise_for_status()
    except requests.exceptions.RequestException:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    soup = BeautifulSoup(response.text, "html.parser")

    days_data = {}
    current_day, current_date = "", ""

    for row in soup.find_all("tr"):
        # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        day_cell = row.find("td", string=lambda t: t and any(
            d in str(t) for d in ["–ü–Ω–¥.", "–í—Ç.", "–°—Ä.", "–ß—Ç.", "–ü—Ç–Ω.", "–°—É–±."]))
        if day_cell:
            current_day = day_cell.get_text(strip=True)

        # –î–∞—Ç–∞
        date_cell = row.find("td", string=lambda t: t and "." in str(t) and "25" in str(t))
        if date_cell:
            current_date = date_cell.get_text(strip=True)

        # –Ø—á–µ–π–∫–∞ –≥—Ä—É–ø–ø—ã
        pi_cell = row.find("td", id=f"{target_group}_", class_=f"{target_group}_")
        if pi_cell and current_day:
            text = pi_cell.get_text(" ", strip=True)
            if text and text != "1":
                para_cell = row.find("td", string=lambda t: t and "–ø–∞—Ä–∞" in str(t))
                para_number = para_cell.get_text(strip=True) if para_cell else ""
                time_info = pi_cell.get("para", "")

                if current_day not in days_data:
                    days_data[current_day] = {"date": current_date, "lessons": []}

                parts = text.split(',')
                subject = parts[0].strip() if parts else ""
                type_teacher = parts[1].strip() if len(parts) > 1 else ""
                location_raw = ','.join(parts[2:]).strip() if len(parts) > 2 else ""
                location = process_location(location_raw)

                days_data[current_day]["lessons"].append({
                    "para": para_number,
                    "time": time_info,
                    "subject": subject,
                    "type_teacher": type_teacher,
                    "location": location
                })

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
    if not days_data:
        return f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {target_group} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    result = [f"üéì –†–ê–°–ü–ò–°–ê–ù–ò–ï –î–õ–Ø {target_group}"]
    for day, data in days_data.items():
        result.append(f"\nüìÖ {day} ({data['date']})")
        result.append("-" * 50)
        for lesson in data["lessons"]:
            num = "".join(filter(str.isdigit, lesson["para"]))
            time = BELL_SCHEDULE.get(num, lesson["time"])
            type_short = lesson["type_teacher"].split('.')[0]
            result.append(f"üïí {num} –ø–∞—Ä–∞ ({time}) | {lesson['subject']} | {type_short} | {lesson['location']}")
    return "\n".join(result)


# üöÄ –ö–æ–º–∞–Ω–¥—ã Telegram
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üí°\n–ù–∞–ø–∏—à–∏ /raspisanie —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ü–ò-51–∑.")


@bot.message_handler(commands=['raspisanie'])
def send_schedule(message):
    msg = bot.reply_to(message, "üì° –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")
    schedule_text = get_schedule_for_group("–ü–ò-51–∑")
    bot.edit_message_text(schedule_text, chat_id=msg.chat.id, message_id=msg.message_id)


# üîÑ –ó–∞–ø—É—Å–∫
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling(none_stop=True)
